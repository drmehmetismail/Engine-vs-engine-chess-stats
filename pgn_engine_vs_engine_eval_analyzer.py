"""This script inputs the PGN file generated by eval_corrector_ccrl.py and outputs a JSON file, including calculations
of various stats such as GI, GPL, ACPL, etc. for each game. The scripts takes into account the fact that 
evaluations are engine-specific.
"""

import chess
import chess.pgn
import chess.engine
import json
import os
from chess.engine import Cp, Wdl
import sys
import time
import chardet

# Function to extract the evaluation from a node
def extract_eval_from_node(node):
    node_evaluation = node.eval()
    #print("node_evaluation: ", node_evaluation)
    if node_evaluation:
        cp_value = node_evaluation.pov(chess.WHITE).score(mate_score=10000) / 100.0
        return cp_value
    else:
        return None

# Function to extract the evaluations from a PGN file
def extract_pawn_evals_from_pgn(game):
    pawns_list = [0]
    for node in game.mainline():
        eval_value = extract_eval_from_node(node)
        if eval_value is not None:
            pawns_list.append(eval_value)
    if len(pawns_list) > 1:
        pawns_list[0] = pawns_list[1]
    #print("pawns_list: ", pawns_list)
    return pawns_list

# Function to calculate the ACPL for both players
def calculate_acpl(pawns_list):
    white_losses, black_losses = [], []
    for i in range(1, len(pawns_list)):
        centipawn_loss = 100*(pawns_list[i] - pawns_list[i - 1])
        if i % 2 == 1:  # White's turn
            white_losses.append(-centipawn_loss)
        else:  # Black's turn
            black_losses.append(centipawn_loss)
    white_acpl = sum(white_losses) / len(white_losses) if white_losses else 0
    black_acpl = sum(black_losses) / len(black_losses) if black_losses else 0
    return white_acpl, black_acpl

def calculate_gi_by_result(white_gpl, black_gpl, game_result, postmove_exp_white, postmove_exp_black):
    # Calculate GI based on game result
    if game_result == '1/2-1/2':
        white_gi = 0.5 - white_gpl
        black_gi = 0.5 - black_gpl
    elif game_result == '1-0':
        white_gi = 1 - white_gpl
        black_gi = -black_gpl
    elif game_result == '0-1':
        black_gi = 1 - black_gpl
        white_gi = -white_gpl
    else:
        white_gi = postmove_exp_white - white_gpl
        black_gi = postmove_exp_black - black_gpl

    return white_gi, black_gi

# Function to calculate GI and GPL in the usual way
def gi_and_gpl(pawns_list, game_result):
    white_gpl, black_gpl = 0, 0
    white_gi, black_gi = 0, 0
    white_move_number, black_move_number = 0, 0

    for i, cp in enumerate(pawns_list):
        # Determine whose turn it is
        #print("i: ", i)
        turn = "White" if i % 2 == 0 else "Black"
        
        # Convert centipawn value to probability
        # handle the initial case
        premove_eval = Cp(int(100 * pawns_list[i-1] if i > 0 else 100 * pawns_list[1]))
        #print("premove_eval: ", premove_eval)
        postmove_eval = Cp(int(100 * cp))
        #print("cp: ", cp)
        #print("postmove_eval: ", postmove_eval)

        # Calculate expected values before the move
        win_draw_loss = premove_eval.wdl()
        win_prob, draw_prob, loss_prob = win_draw_loss.wins / 1000, win_draw_loss.draws / 1000, win_draw_loss.losses / 1000
        premove_exp_white, premove_exp_black = calculate_expected_value(win_prob, draw_prob, loss_prob, turn)

        # Calculate expected values after the move
        win_draw_loss = postmove_eval.wdl()
        win_prob, draw_prob, loss_prob = win_draw_loss.wins / 1000, win_draw_loss.draws / 1000, win_draw_loss.losses / 1000
        postmove_exp_white, postmove_exp_black = calculate_expected_value(win_prob, draw_prob, loss_prob, turn)

        # Calculate GPL and update move number
        if turn == "Black":
            exp_white_point_loss = postmove_exp_white - premove_exp_white
            white_gpl += exp_white_point_loss
            #print("white_move_number: ", white_move_number)
            #print("premove_eval: ", premove_eval)
            #print("postmove_eval: ", postmove_eval)
            white_move_number += 1
        else:
            exp_black_point_loss = premove_exp_black - postmove_exp_black
            black_gpl += exp_black_point_loss
            black_move_number += 1
    # Calculate GI based on game result
    white_gi, black_gi = calculate_gi_by_result(white_gpl, black_gpl, game_result, postmove_exp_white, postmove_exp_black)

    return white_gi, black_gi, white_gpl, black_gpl, white_move_number, black_move_number-1

# Function to calculate the expected value of a position
def calculate_expected_value(win_prob, draw_prob, loss_prob, turn):
    if turn == "White":
        expected_value_white = win_prob * 1 + draw_prob * 0.5
        expected_value_black = loss_prob * 1 + draw_prob * 0.5
    else:
        expected_value_white = loss_prob * 1 + draw_prob * 0.5
        expected_value_black = win_prob * 1 + draw_prob * 0.5
    return expected_value_white, expected_value_black

# This function calculates the GI and GPL for both players in an engine vs engine game using the evaluations of the other 
# engine. A move's GPL is calculated as the difference between the expected value of the position before the move
# and after the opponent's move (the own engine's evaluation is skipped). 
def calculate_engine_vs_engine_GI(pawns_list, game_result):
    # Initialize lists to store the skipped centipawn loss for White and Black
    white_scpl, black_scpl = [], []
    white_sgpl, black_sgpl = 0, 0
    white_sgi, black_sgi = 0, 0
    # Loop through the pawns_list list, skipping every other value to process each player's moves
    for i in range(1, len(pawns_list) - 1, 2):
        # For the first move of White, set the SCPL to 0
        if i == 1:
            white_scpl.append(0)
            premove_eval = Cp(int(0))
        else:
            # For White: Calculate the SCPL for White's move between two Black moves
            white_scpl.append(pawns_list[i - 1] - pawns_list[i + 1])

            premove_eval = Cp(int(100 * pawns_list[i-1]))
            postmove_eval = Cp(int(100 * pawns_list[i+1]))
            # Calculate expected values before the move
            win_draw_loss = premove_eval.wdl()
            win_prob, draw_prob, loss_prob = win_draw_loss.wins / 1000, win_draw_loss.draws / 1000, win_draw_loss.losses / 1000
            premove_exp_white, premove_exp_black = calculate_expected_value(win_prob, draw_prob, loss_prob, turn="White")

            # Calculate expected values after the move
            win_draw_loss = postmove_eval.wdl()
            win_prob, draw_prob, loss_prob = win_draw_loss.wins / 1000, win_draw_loss.draws / 1000, win_draw_loss.losses / 1000
            postmove_exp_white, postmove_exp_black = calculate_expected_value(win_prob, draw_prob, loss_prob, turn="White")

            exp_white_point_loss = premove_exp_white - postmove_exp_white
            white_sgpl += exp_white_point_loss
        # Check if there's a subsequent move by Black to calculate its SCPL
        if i + 2 < len(pawns_list):
            # For Black: Calculate the SCPL for each move
            black_scpl.append(pawns_list[i + 2] - pawns_list[i])
            premove_eval = Cp(int(100 * pawns_list[i]))
            postmove_eval = Cp(int(100 * pawns_list[i+2]))
            # Calculate expected values before the move
            win_draw_loss = premove_eval.wdl()
            win_prob, draw_prob, loss_prob = win_draw_loss.wins / 1000, win_draw_loss.draws / 1000, win_draw_loss.losses / 1000
            premove_exp_white, premove_exp_black = calculate_expected_value(win_prob, draw_prob, loss_prob, turn = "White")
            #print("premove win_draw_loss: ", win_draw_loss)
            # Calculate expected values after the move
            win_draw_loss = postmove_eval.wdl()
            win_prob, draw_prob, loss_prob = win_draw_loss.wins / 1000, win_draw_loss.draws / 1000, win_draw_loss.losses / 1000
            postmove_exp_white, postmove_exp_black = calculate_expected_value(win_prob, draw_prob, loss_prob, turn = "White")
            
            # exp_black_point_loss is defined as below because if postmove_exp_black < premove_exp_black then
            # it means that Black's loss must be positive (and vice versa).
            exp_black_point_loss = premove_exp_black - postmove_exp_black
            black_sgpl += exp_black_point_loss    # For the last move of Black, set the SCPL to 0

    # Calculate the average SCPL for White, ensuring there are white moves to avoid division by zero
    white_stcpl = sum(white_scpl) if white_scpl else 0
    #print("white_scpl: ", white_scpl)

    # Calculate the average SCPL for Black, ensuring there are black moves to avoid division by zero
    black_stcpl = sum(black_scpl) if black_scpl else 0
    #print("black_scpl: ", black_scpl)

    # Calculate GI based on game result
    white_sgi, black_sgi = calculate_gi_by_result(white_sgpl, black_sgpl, game_result, postmove_exp_white, postmove_exp_black)

    # Return the average SCPL for both White and Black
    return white_stcpl, black_stcpl, white_sgi, black_sgi, white_sgpl, black_sgpl

def detect_encoding(file_path):
    with open(file_path, 'rb') as f:
        raw_data = f.read(50000)  # Read first 50,000 bytes to guess encoding
    return chardet.detect(raw_data)['encoding']

def main(input_pgn_dir, output_json_dir):
    # Ensure the output directory exists
    if not os.path.exists(output_json_dir):
        os.makedirs(output_json_dir)
    # Define the output JSON file path
    aggregated_data = {}
    key_counter = 1
    # walk through all pgn files in the dir
    for dirpath, dirnames, filenames in os.walk(input_pgn_dir):
        for filename in filenames:
            if filename.endswith('.pgn'):
                aggregated_data = {}
                pgn_file_path = os.path.join(dirpath, filename)
                print("pgn_file_path :", pgn_file_path)
                json_file_name = filename.replace('.pgn', '.json')
                output_json_path = os.path.join(output_json_dir, json_file_name)    
                file_encoding = detect_encoding(pgn_file_path)
                #print("file_encoding: ", file_encoding)
                with open(pgn_file_path, encoding=file_encoding, errors='replace') as pgn:
                    while True:
                        game = chess.pgn.read_game(pgn)
                        if game is None:
                            break
                        # Get the headers of the game
                        game_result = game.headers.get('Result', None)
                        if game_result == '1-0':
                            whiteResult = 1
                            blackResult = 0
                        elif game_result == '0-1':
                            whiteResult = 0
                            blackResult = 1
                        elif game_result == '1/2-1/2':
                            whiteResult = 0.5
                            blackResult = 0.5
                        else:
                            whiteResult = '...'
                            blackResult = '...'
                        # Further game details
                        game_details = {
                            "White": game.headers.get("White", None),
                            "Black": game.headers.get("Black", None),
                            "Event": game.headers.get("Event", None),
                            "Site": game.headers.get("Site", None),
                            "Round": game.headers.get("Round", None),
                            "WhiteElo": game.headers.get("WhiteElo", None),
                            "BlackElo": game.headers.get("BlackElo", None),
                            "WhiteResult": whiteResult,
                            "BlackResult": blackResult,
                            "Date": game.headers.get("Date", None),
                                }

                        pawns_list = extract_pawn_evals_from_pgn(game)
                        white_acpl, black_acpl = calculate_acpl(pawns_list)

                        #black_moves = (len(pawns_list) - 1) // 2
                        #white_moves = len(pawns_list) - 1 - black_moves

                        # Calculate GI and GPL for both players
                        white_gi, black_gi, white_gpl, black_gpl, white_move_number, black_move_number = gi_and_gpl(pawns_list, game_result)

                        white_stcpl, black_stcpl, white_sgi, black_sgi, white_sgpl, black_sgpl = calculate_engine_vs_engine_GI(pawns_list, game_result)

                        key = key_counter
                        game_data = {
                            "white_sgi": round(white_sgi, 4), "black_sgi": round(black_sgi, 4),
                            "white_sgpl": round(white_sgpl, 4), "black_sgpl": round(black_sgpl, 4),
                            "white_stcpl": round(white_stcpl, 4), "black_stcpl": round(black_stcpl, 4),
                            "white_gi": round(white_gi, 4), "black_gi": round(black_gi, 4),
                            "white_gpl": round(white_gpl, 4), "black_gpl": round(black_gpl, 4),
                            "white_acpl": round(white_acpl, 4), "black_acpl": round(black_acpl, 4),
                            "white_move_number": white_move_number, "black_move_number": black_move_number,
                            **game_details,
                        }
                        aggregated_data[key] = game_data
                        key_counter += 1
                if aggregated_data:
                    with open(output_json_path, 'w') as json_file:
                        json.dump(aggregated_data, json_file, indent=4)
                    #print(f"Aggregated data saved to {output_json_path}")
    print(f"#Games = {key_counter}")
    
if __name__ == "__main__":
    start_time = time.time()
    if len(sys.argv) < 3:
        print("Usage: python pgn_engine_vs_engine_eval_analyzer.py <input_pgn_dir> <output_json_dir>")
        sys.exit(1)

    input_pgn_dir = sys.argv[1]
    output_json_dir = sys.argv[2]
    main(input_pgn_dir, output_json_dir)
    end_time = time.time()
    print("Script finished in {:.2f} minutes".format((end_time - start_time) / 60.0))
